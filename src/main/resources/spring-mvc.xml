<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:websocket="http://www.springframework.org/schema/websocket"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd
		http://www.springframework.org/schema/websocket http://www.springframework.org/schema/websocket/spring-websocket-4.1.xsd">

	<description>Spring MVC Configuration</description>

	<!-- 加载配置属性文件 -->
	<context:property-placeholder
		ignore-unresolvable="true" location="classpath:init.properties" />

	<!-- 使用Annotation自动注册Bean,只扫描@Controller -->
	<context:component-scan base-package="org.sdblt"
		use-default-filters="false"><!-- base-package 如果多个，用“,”分隔 -->
		<context:include-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
		<!-- <context:include-filter type="annotation"
			expression="org.springframework.stereotype.Service" />
		<context:include-filter type="annotation"
			expression="javax.inject.Named" />
		<context:include-filter type="annotation"
			expression="javax.inject.Inject" /> -->
	</context:component-scan>
	<!-- Jpa Repositories -->

	<!-- 默认的注解映射的支持，org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping -->
	<mvc:annotation-driven
		content-negotiation-manager="contentNegotiationManager">
		<mvc:message-converters register-defaults="true">
			<!-- 将StringHttpMessageConverter的默认编码设为UTF-8 -->
			<bean class="org.springframework.http.converter.StringHttpMessageConverter">
				<constructor-arg value="UTF-8" />
			</bean>
			<!-- 将Jackson2HttpMessageConverter的默认格式化输出为false -->
			<!-- <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"> 
				<property name="supportedMediaTypes"> <list> <value>text/html;charset=UTF-8</value> 
				<value>application/json;charset=UTF-8</value> </list> </property> <property 
				name="prettyPrint" value="false" /> <property name="objectMapper"> <bean 
				class="org.sdblt.common.JsonMapper"></bean> </property> </bean> -->
			<bean
				class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter">
				<property name="supportedMediaTypes" value="text/html;charset=UTF-8" />
				<property name="features">
					<array>
						<!-- <value>WriteMapNullValue</value> -->
						<value>DisableCircularReferenceDetect</value>
						<value>WriteNullStringAsEmpty</value>
					</array>
				</property>
			</bean>
		</mvc:message-converters>
	</mvc:annotation-driven>

	<!-- REST中根据URL后缀自动判定Content-Type及相应的View -->
	<bean id="contentNegotiationManager"
		class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
		<property name="mediaTypes">
			<map>
				<!-- <entry key="xml" value="application/xml"/> -->
				<entry key="json" value="application/json" />
			</map>
		</property>
		<property name="ignoreAcceptHeader" value="true" />
		<property name="favorPathExtension" value="true" />
	</bean>

	<!-- 定义视图文件解析 -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="${web.view.prefix}" />
		<property name="suffix" value="${web.view.suffix}" />
	</bean>

	<!-- 对静态资源文件的访问， 将无法mapping到Controller的path交给default servlet handler处理 -->
	<mvc:default-servlet-handler />

	<!-- 静态资源映射 -->
	<mvc:resources mapping="/static/**" location="/static/"
		cache-period="31536000" />

	<!-- 定义无Controller的path<->view直接映射 -->
	<mvc:view-controller path="/"
		view-name="redirect:${web.view.index}" />

	<!-- 拦截器配置，拦截顺序：先执行后定义的，排在第一位的最后执行。 -->
	<mvc:interceptors>
		<!-- <mvc:interceptor>
			<mvc:mapping path="${adminPath}/**" />
			<mvc:exclude-mapping path="${adminPath}/login" />
			<bean class="org.sdblt.common.interceptor.LogInterceptor" /> 
		</mvc:interceptor> -->
		<mvc:interceptor>
			<mvc:mapping path="/**" />
			<bean class="org.sdblt.common.interceptor.CommonInterceptor" />
		</mvc:interceptor>
		<mvc:interceptor>
			<mvc:mapping path="/${restPath}/**" />
			<mvc:mapping path="/main" />
			<mvc:exclude-mapping path="/index"/>
			<mvc:exclude-mapping path="/loginModal"/>
			<mvc:exclude-mapping path="/login/check"/>
			<mvc:exclude-mapping path="/exit"/>
			<bean class="org.sdblt.common.interceptor.LoginInterceptor" />
		</mvc:interceptor>
	</mvc:interceptors>

	<bean class="org.sdblt.common.spring.SpringMVCSimpleMappingExceptionResolver">
        <property name="exceptionMappings">
            <props>
                <prop key="java.lang.Throwable">error/500</prop>
            </props>
        </property>
         <!-- 设置日志输出级别，不定义则默认不输出警告等错误日志信息 -->       
         <property name="warnLogCategory" value="WARN"></property>       
         <!-- 默认错误页面，当找不到上面mappings中指定的异常对应视图时，使用本默认配置 -->       
         <property name="defaultErrorView" value="errors/error"></property>       
         <!-- 默认HTTP状态码 -->       
         <property name="defaultStatusCode" value="500"></property>       
    </bean>
	<!-- 支持Shiro对Controller的方法级AOP安全控制 end -->

	<!-- 上传文件拦截，设置最大上传文件大小 10M=10*1024*1024(B)=10485760 bytes -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize" value="${web.maxUploadSize}" />
	</bean>

	<bean id="applicationContext" class="org.sdblt.common.spring.InstanceFactory" />
	<bean class="org.sdblt.common.spring.InitDataListener" />



</beans>